#include <memory>
#include <gtest/gtest.h>
#include "xacc.hpp"
#include "xacc_service.hpp"

namespace {
  // Test circuit that represents a supremacy-type circuit
  // Note: the parametric two-qubit gate (fsim) is replaced with CNOT
  // we just care about the circuit structure in this test,
  // hence, they are equivalent.
  const std::string sycamoreXASM = R"(__qpu__ void testSycamore(qbit q) {
    H(q[0]);
    Rx(q[1], 1.5708);
    Rx(q[2], 1.5708);
    H(q[3]);
    Ry(q[4], 1.5708);
    H(q[5]);
    H(q[6]);
    H(q[7]);
    H(q[8]);
    Rx(q[9], 1.5708);
    Ry(q[10], 1.5708);
    H(q[11]);
    H(q[12]);
    H(q[13]);
    H(q[14]);
    Ry(q[15], 1.5708);
    Rx(q[16], 1.5708);
    Rx(q[17], 1.5708);
    H(q[18]);
    Rx(q[19], 1.5708);
    Rx(q[20], 1.5708);
    H(q[21]);
    Ry(q[22], 1.5708);
    Rx(q[23], 1.5708);
    Rx(q[24], 1.5708);
    Ry(q[25], 1.5708);
    H(q[26]);
    Rx(q[27], 1.5708);
    H(q[28]);
    H(q[29]);
    Rx(q[30], 1.5708);
    Rx(q[31], 1.5708);
    Rx(q[32], 1.5708);
    Ry(q[33], 1.5708);
    H(q[34]);
    Ry(q[35], 1.5708);
    H(q[36]);
    H(q[37]);
    H(q[38]);
    Ry(q[39], 1.5708);
    H(q[40]);
    Rx(q[41], 1.5708);
    Rx(q[42], 1.5708);
    Rx(q[43], 1.5708);
    H(q[44]);
    Ry(q[45], 1.5708);
    Rx(q[46], 1.5708);
    H(q[47]);
    Ry(q[48], 1.5708);
    Ry(q[49], 1.5708);
    Ry(q[50], 1.5708);
    H(q[51]);
    Rx(q[52], 1.5708);
    Rz(q[1], 0.7743385483953005);
    Rz(q[4], -0.7085204779284944);
    Rz(q[3], -0.8687711187158653);
    Rz(q[7], 0.3853766657859231);
    Rz(q[5], -0.3522159558487364);
    Rz(q[9], 0.569527381436443);
    Rz(q[6], 0.06748036788071975);
    Rz(q[13], -0.03542260032736748);
    Rz(q[8], 0.921123478965347);
    Rz(q[15], -0.940605149780575);
    Rz(q[10], 0.40878079457469985);
    Rz(q[17], -0.3573777822597026);
    Rz(q[12], 0.4286328898578044);
    Rz(q[21], -0.567173927172081);
    Rz(q[14], 0.6962362636582926);
    Rz(q[23], -0.6243336356713873);
    Rz(q[16], 0.5070267688233168);
    Rz(q[25], -0.49025706927611445);
    Rz(q[18], -0.82479487914479);
    Rz(q[27], 0.831505604695568);
    Rz(q[20], 0.7654710267272109);
    Rz(q[30], -0.7622667609489339);
    Rz(q[22], -0.7530995459405583);
    Rz(q[32], 0.7063901684965722);
    Rz(q[24], -0.7750964509509387);
    Rz(q[34], 0.9619956872914577);
    Rz(q[26], -0.8310454946335954);
    Rz(q[36], 0.8149432193242095);
    Rz(q[29], 0.568448771120722);
    Rz(q[37], -0.5458328527656618);
    Rz(q[31], 0.46444025457872556);
    Rz(q[39], -0.8641681946768033);
    Rz(q[33], 0.33639050361710615);
    Rz(q[41], -0.4121311900075394);
    Rz(q[35], 0.881176970884841);
    Rz(q[43], -0.8199816956867351);
    Rz(q[38], -0.5174631371535426);
    Rz(q[44], 0.5093922035705379);
    Rz(q[40], -0.2684453761112637);
    Rz(q[46], 0.26751780455859997);
    Rz(q[42], 0.7883616255904944);
    Rz(q[48], 0.9304903862480522);
    Rz(q[45], 0.5471409474788239);
    Rz(q[49], -0.5891117186780521);
    Rz(q[47], 0.7384907660505857);
    Rz(q[51], -0.7451407522809496);
    Rz(q[50], -0.1830293948567971);
    Rz(q[52], -0.1757017537984857);
    CNOT(q[1], q[4]);
    CNOT(q[3], q[7]);
    CNOT(q[5], q[9]);
    CNOT(q[6], q[13]);
    CNOT(q[8], q[15]);
    CNOT(q[10], q[17]);
    CNOT(q[12], q[21]);
    CNOT(q[14], q[23]);
    CNOT(q[16], q[25]);
    CNOT(q[18], q[27]);
    CNOT(q[20], q[30]);
    CNOT(q[22], q[32]);
    CNOT(q[24], q[34]);
    CNOT(q[26], q[36]);
    CNOT(q[29], q[37]);
    CNOT(q[31], q[39]);
    CNOT(q[33], q[41]);
    CNOT(q[35], q[43]);
    CNOT(q[38], q[44]);
    CNOT(q[40], q[46]);
    CNOT(q[42], q[48]);
    CNOT(q[45], q[49]);
    CNOT(q[47], q[51]);
    CNOT(q[50], q[52]);
    Rz(q[1], -0.7618064157555159);
    Rz(q[4], 0.827624486222322);
    Rz(q[3], 0.677790595837605);
    Rz(q[7], 0.8388149512324528);
    Rz(q[5], 0.34915411632258214);
    Rz(q[9], -0.13184269073487556);
    Rz(q[6], 0.4610625765182105);
    Rz(q[13], -0.4290048089648583);
    Rz(q[8], 0.6641998401797986);
    Rz(q[15], -0.6836815109950266);
    Rz(q[10], 0.026240452181357746);
    Rz(q[17], 0.025162560133639312);
    Rz(q[12], 0.9071761579568303);
    Rz(q[21], 0.9542828047288932);
    Rz(q[14], -0.46145806100291004);
    Rz(q[23], 0.5333606889898155);
    Rz(q[16], 0.5128100748460089);
    Rz(q[25], -0.4960403752988061);
    Rz(q[18], 0.5829645187562967);
    Rz(q[27], -0.5762537932055181);
    Rz(q[20], 0.022811401598836913);
    Rz(q[30], -0.019607135820559906);
    Rz(q[22], 0.8523020333228131);
    Rz(q[32], -0.8990114107667992);
    Rz(q[24], 0.9352866185158868);
    Rz(q[34], -0.7483873821753678);
    Rz(q[26], -0.9220101925888569);
    Rz(q[36], 0.9059079172794712);
    Rz(q[29], 0.7039221690166656);
    Rz(q[37], -0.6813062506616053);
    Rz(q[31], 0.6965073865506469);
    Rz(q[39], 0.9037646733512754);
    Rz(q[33], -0.45310524873049973);
    Rz(q[41], 0.3773645623400665);
    Rz(q[35], 0.42017342300456634);
    Rz(q[43], -0.3589781478064599);
    Rz(q[38], 0.9534707755965702);
    Rz(q[44], -0.9615417091795746);
    Rz(q[40], 0.5368636250628501);
    Rz(q[46], -0.5377911966155139);
    Rz(q[42], 0.5123942238917779);
    Rz(q[48], -0.7935422120532315);
    Rz(q[45], -0.7898684772427236);
    Rz(q[49], 0.7478977060434954);
    Rz(q[47], -0.8571455144841159);
    Rz(q[51], 0.8504955282537521);
    Rz(q[50], 0.9094649565590708);
    Rz(q[52], 0.7318038947856463);
    Ry(q[0], 1.5708);
    Ry(q[1], 1.5708);
    Ry(q[2], 1.5708);
    Rx(q[3], 1.5708);
    Rx(q[4], 1.5708);
    Rx(q[5], 1.5708);
    Rx(q[6], 1.5708);
    Rx(q[7], 1.5708);
    Ry(q[8], 1.5708);
    H(q[9]);
    Rx(q[10], 1.5708);
    Rx(q[11], 1.5708);
    Ry(q[12], 1.5708);
    Rx(q[13], 1.5708);
    Ry(q[14], 1.5708);
    H(q[15]);
    H(q[16]);
    Ry(q[17], 1.5708);
    Ry(q[18], 1.5708);
    H(q[19]);
    Ry(q[20], 1.5708);
    Ry(q[21], 1.5708);
    H(q[22]);
    Ry(q[23], 1.5708);
    Ry(q[24], 1.5708);
    H(q[25]);
    Rx(q[26], 1.5708);
    H(q[27]);
    Ry(q[28], 1.5708);
    Ry(q[29], 1.5708);
    Ry(q[30], 1.5708);
    Ry(q[31], 1.5708);
    H(q[32]);
    H(q[33]);
    Ry(q[34], 1.5708);
    Rx(q[35], 1.5708);
    Rx(q[36], 1.5708);
    Rx(q[37], 1.5708);
    Ry(q[38], 1.5708);
    Rx(q[39], 1.5708);
    Ry(q[40], 1.5708);
    H(q[41]);
    H(q[42]);
    Ry(q[43], 1.5708);
    Ry(q[44], 1.5708);
    Rx(q[45], 1.5708);
    H(q[46]);
    Ry(q[47], 1.5708);
    Rx(q[48], 1.5708);
    Rx(q[49], 1.5708);
    Rx(q[50], 1.5708);
    Ry(q[51], 1.5708);
    H(q[52]);
    Rz(q[0], 0.07221640979880403);
    Rz(q[3], 0.17734365608174887);
    Rz(q[2], -0.7166427083722222);
    Rz(q[6], 0.717673588252228);
    Rz(q[4], -0.1312926423470736);
    Rz(q[8], 0.13158529074665537);
    Rz(q[7], 0.7500367576549269);
    Rz(q[14], -0.31797150857789674);
    Rz(q[9], -0.8756735306896725);
    Rz(q[16], -0.9327732133062662);
    Rz(q[11], 0.7071565092929694);
    Rz(q[20], -0.6264998637477406);
    Rz(q[13], 0.82790347048799);
    Rz(q[22], -0.8594778743809006);
    Rz(q[15], 0.8064559428449068);
    Rz(q[24], -0.7629602352736249);
    Rz(q[17], -0.23630732076940514);
    Rz(q[26], 0.25438180016733336);
    Rz(q[19], 0.6476084230939583);
    Rz(q[29], -0.6528339440806201);
    Rz(q[21], -0.20879565669998532);
    Rz(q[31], -0.26053049452558324);
    Rz(q[23], -0.7777343640360711);
    Rz(q[33], 0.8805385932920736);
    Rz(q[25], -0.5137630264839785);
    Rz(q[35], 0.48179097076948874);
    Rz(q[30], 0.7693840211762448);
    Rz(q[38], -0.7680082232923118);
    Rz(q[32], 0.14188452450562264);
    Rz(q[40], -0.1339396318115881);
    Rz(q[34], -0.95616894502165);
    Rz(q[42], -0.9015807139989003);
    Rz(q[39], -0.3168365530459615);
    Rz(q[45], 0.2898226701533191);
    Rz(q[41], -0.32361247881294825);
    Rz(q[47], 0.27931184143712456);
    Rz(q[46], 0.884543382731205);
    Rz(q[50], -0.8540367322639986);
    CNOT(q[0], q[3]);
    CNOT(q[2], q[6]);
    CNOT(q[4], q[8]);
    CNOT(q[7], q[14]);
    CNOT(q[9], q[16]);
    CNOT(q[11], q[20]);
    CNOT(q[13], q[22]);
    CNOT(q[15], q[24]);
    CNOT(q[17], q[26]);
    CNOT(q[19], q[29]);
    CNOT(q[21], q[31]);
    CNOT(q[23], q[33]);
    CNOT(q[25], q[35]);
    CNOT(q[30], q[38]);
    CNOT(q[32], q[40]);
    CNOT(q[34], q[42]);
    CNOT(q[39], q[45]);
    CNOT(q[41], q[47]);
    CNOT(q[46], q[50]);
    Rz(q[0], 0.10267615219883607);
    Rz(q[3], 0.14688391368171685);
    Rz(q[2], 0.5303948572093229);
    Rz(q[6], -0.529363977329317);
    Rz(q[4], -0.6623304931849363);
    Rz(q[8], 0.6626231415845181);
    Rz(q[7], 0.06783382350879162);
    Rz(q[14], 0.36423142556823856);
    Rz(q[9], -0.9730909692986618);
    Rz(q[16], -0.8353557746972768);
    Rz(q[11], -0.5361169534193021);
    Rz(q[20], 0.6167735989645307);
    Rz(q[13], -0.6122117071342573);
    Rz(q[22], 0.5806373032413467);
    Rz(q[15], 0.968052322606287);
    Rz(q[24], -0.9245566150350051);
    Rz(q[17], -0.6534917441628949);
    Rz(q[26], 0.6715662235608231);
    Rz(q[19], -0.7407238202696524);
    Rz(q[29], 0.7354982992829906);
    Rz(q[21], -0.06340668623729523);
    Rz(q[31], -0.40591946498827336);
    Rz(q[23], -0.4557556128718794);
    Rz(q[33], 0.558559842127882);
    Rz(q[25], 0.923796560084577);
    Rz(q[35], -0.9557686157990668);
    Rz(q[30], 0.6313087990584325);
    Rz(q[38], -0.6299330011745);
    Rz(q[32], -0.20274234705300925);
    Rz(q[40], 0.21068723974704434);
    Rz(q[34], 0.5124187849542257);
    Rz(q[42], -0.3701684439747759);
    Rz(q[39], -0.3038733131602001);
    Rz(q[45], 0.2768594302675577);
    Rz(q[41], 0.26284256852387516);
    Rz(q[47], -0.3071432058996983);
    Rz(q[46], 0.7502523839911145);
    Rz(q[50], -0.719745733523908);
    Rx(q[0], 1.5708);
    Rx(q[1], 1.5708);
    Rx(q[2], 1.5708);
    H(q[3]);
    H(q[4]);
    Ry(q[5], 1.5708);
    H(q[6]);
    H(q[7]);
    Rx(q[8], 1.5708);
    Ry(q[9], 1.5708);
    Ry(q[10], 1.5708);
    Ry(q[11], 1.5708);
    Rx(q[12], 1.5708);
    Ry(q[13], 1.5708);
    Rx(q[14], 1.5708);
    Ry(q[15], 1.5708);
    Ry(q[16], 1.5708);
    Rx(q[17], 1.5708);
    Rx(q[18], 1.5708);
    Ry(q[19], 1.5708);
    H(q[20]);
    Rx(q[21], 1.5708);
    Rx(q[22], 1.5708);
    Rx(q[23], 1.5708);
    H(q[24]);
    Ry(q[25], 1.5708);
    Ry(q[26], 1.5708);
    Ry(q[27], 1.5708);
    H(q[28]);
    H(q[29]);
    Rx(q[30], 1.5708);
    Rx(q[31], 1.5708);
    Rx(q[32], 1.5708);
    Rx(q[33], 1.5708);
    Rx(q[34], 1.5708);
    H(q[35]);
    H(q[36]);
    Ry(q[37], 1.5708);
    H(q[38]);
    Ry(q[39], 1.5708);
    H(q[40]);
    Rx(q[41], 1.5708);
    Rx(q[42], 1.5708);
    H(q[43]);
    Rx(q[44], 1.5708);
    H(q[45]);
    Ry(q[46], 1.5708);
    Rx(q[47], 1.5708);
    H(q[48]);
    H(q[49]);
    H(q[50]);
    Rx(q[51], 1.5708);
    Ry(q[52], 1.5708);
    Rz(q[0], 0.868874517623681);
    Rz(q[1], -0.5062300204223075);
    Rz(q[2], 0.6874509025876478);
    Rz(q[3], -0.6826684237245009);
    Rz(q[4], 0.3757979651191995);
    Rz(q[5], -0.3369000264078134);
    Rz(q[7], 0.5165579149683887);
    Rz(q[8], -0.9838406309684837);
    Rz(q[9], 0.6517543596020707);
    Rz(q[10], -0.8938908007211287);
    Rz(q[11], 0.011576333256837757);
    Rz(q[12], 0.1994965304792813);
    Rz(q[13], -0.5357402786793479);
    Rz(q[14], 0.5797224477448737);
    Rz(q[15], 0.6015756389470484);
    Rz(q[16], -0.573317645438219);
    Rz(q[17], 0.3791786031325414);
    Rz(q[18], -0.676931394322152);
    Rz(q[19], 0.6257613274555152);
    Rz(q[20], -0.6210571332355261);
    Rz(q[21], -0.45193657844083596);
    Rz(q[22], 0.16633011275543763);
    Rz(q[23], -0.8632357323678501);
    Rz(q[24], 0.5580904452638696);
    Rz(q[25], 0.7226189706701976);
    Rz(q[26], -0.7708292466716248);
    Rz(q[28], -0.628899885711077);
    Rz(q[29], 0.8564821803203452);
    Rz(q[30], -0.48600051750832335);
    Rz(q[31], 0.40704671139578114);
    Rz(q[32], 0.7509923227943213);
    Rz(q[33], -0.7705635810307807);
    Rz(q[34], 0.5247429096711106);
    Rz(q[35], -0.31560248875795377);
    Rz(q[37], 0.4445283033807374);
    Rz(q[38], -0.43843587057450184);
    Rz(q[39], 0.23079678484166474);
    Rz(q[40], -0.24296757608244463);
    Rz(q[41], -0.6933510795197081);
    Rz(q[42], 0.7747059716945244);
    Rz(q[44], 0.6297402023667946);
    Rz(q[45], -0.650250406527777);
    Rz(q[46], 0.8327738427573091);
    Rz(q[47], -0.8966188475674683);
    Rz(q[49], 0.12025352080627527);
    Rz(q[50], -0.029370019547682955);
    CNOT(q[0], q[1]);
    CNOT(q[2], q[3]);
    CNOT(q[4], q[5]);
    CNOT(q[7], q[8]);
    CNOT(q[9], q[10]);
    CNOT(q[11], q[12]);
    CNOT(q[13], q[14]);
    CNOT(q[15], q[16]);
    CNOT(q[17], q[18]);
    CNOT(q[19], q[20]);
    CNOT(q[21], q[22]);
    CNOT(q[23], q[24]);
    CNOT(q[25], q[26]);
    CNOT(q[28], q[29]);
    CNOT(q[30], q[31]);
    CNOT(q[32], q[33]);
    CNOT(q[34], q[35]);
    CNOT(q[37], q[38]);
    CNOT(q[39], q[40]);
    CNOT(q[41], q[42]);
    CNOT(q[44], q[45]);
    CNOT(q[46], q[47]);
    CNOT(q[49], q[50]);
    Rz(q[0], -0.6542790087648793);
    Rz(q[1], -0.9830764940337477);
    Rz(q[2], -0.7079366355498636);
    Rz(q[3], 0.7127191144130105);
    Rz(q[4], -0.5003181025167607);
    Rz(q[5], 0.5392160412281468);
    Rz(q[7], -0.4944938908636658);
    Rz(q[8], 0.027211174863570817);
    Rz(q[9], 0.5893795615335414);
    Rz(q[10], -0.831516002652599);
    Rz(q[11], -0.21350946680641048);
    Rz(q[12], 0.42458233054252953);
    Rz(q[13], -0.14729238052848453);
    Rz(q[14], 0.19127454959401033);
    Rz(q[15], 0.00982266418345571);
    Rz(q[16], 0.018435329325373753);
    Rz(q[17], -0.2092460914861244);
    Rz(q[18], -0.08850669970348643);
    Rz(q[19], -0.04816660891478307);
    Rz(q[20], 0.05287080313477205);
    Rz(q[21], -0.5144804279802232);
    Rz(q[22], 0.2288739622948249);
    Rz(q[23], 0.6539308607246773);
    Rz(q[24], -0.9590761478286578);
    Rz(q[25], -0.6105530873621177);
    Rz(q[26], 0.5623428113606904);
    Rz(q[28], 0.4541035216184288);
    Rz(q[29], -0.22652122700916058);
    Rz(q[30], -0.09920368129230818);
    Rz(q[31], 0.020249875179765953);
    Rz(q[32], -0.7703835607337791);
    Rz(q[33], 0.7508123024973197);
    Rz(q[34], -0.9299380908209051);
    Rz(q[35], -0.8609214882659385);
    Rz(q[37], -0.6603148238966917);
    Rz(q[38], 0.6664072567029273);
    Rz(q[39], 0.011997302735339959);
    Rz(q[40], -0.02416809397611926);
    Rz(q[41], 0.7541471791694208);
    Rz(q[42], -0.6727922869946045);
    Rz(q[44], 0.21828350563706272);
    Rz(q[45], -0.2387937097980442);
    Rz(q[46], 0.8775865857149596);
    Rz(q[47], -0.9414315905251189);
    Rz(q[49], 0.5077173122630191);
    Rz(q[50], -0.4168338110044266);
    H(q[0]);
    H(q[1]);
    Ry(q[2], 1.5708);
    Rx(q[3], 1.5708);
    Rx(q[4], 1.5708);
    Rx(q[5], 1.5708);
    Ry(q[6], 1.5708);
    Rx(q[7], 1.5708);
    Ry(q[8], 1.5708);
    Rx(q[9], 1.5708);
    H(q[10]);
    H(q[11]);
    H(q[12]);
    H(q[13]);
    H(q[14]);
    H(q[15]);
    H(q[16]);
    Ry(q[17], 1.5708);
    Ry(q[18], 1.5708);
    H(q[19]);
    Ry(q[20], 1.5708);
    H(q[21]);
    H(q[22]);
    Ry(q[23], 1.5708);
    Ry(q[24], 1.5708);
    Rx(q[25], 1.5708);
    Rx(q[26], 1.5708);
    Rx(q[27], 1.5708);
    Ry(q[28], 1.5708);
    Rx(q[29], 1.5708);
    H(q[30]);
    H(q[31]);
    H(q[32]);
    Ry(q[33], 1.5708);
    H(q[34]);
    Rx(q[35], 1.5708);
    Rx(q[36], 1.5708);
    Rx(q[37], 1.5708);
    Rx(q[38], 1.5708);
    H(q[39]);
    Rx(q[40], 1.5708);
    H(q[41]);
    H(q[42]);
    Ry(q[43], 1.5708);
    H(q[44]);
    Ry(q[45], 1.5708);
    Rx(q[46], 1.5708);
    H(q[47]);
    Ry(q[48], 1.5708);
    Rx(q[49], 1.5708);
    Ry(q[50], 1.5708);
    H(q[51]);
    Rx(q[52], 1.5708);
    Rz(q[3], 0.493850693839934);
    Rz(q[4], -0.46824735745938767);
    Rz(q[6], 0.2984751103100736);
    Rz(q[7], -0.7975917880942631);
    Rz(q[8], -0.2590669520927105);
    Rz(q[9], 0.46553678230138035);
    Rz(q[12], 0.4922863320894708);
    Rz(q[13], -0.4386037696673656);
    Rz(q[14], -0.9729214362671511);
    Rz(q[15], 0.9612016987900408);
    Rz(q[16], 0.4556017204511883);
    Rz(q[17], -0.4602146990123172);
    Rz(q[20], -0.17115863024938213);
    Rz(q[21], -0.07406694571515549);
    Rz(q[22], -0.04747985536414887);
    Rz(q[23], -0.0015617338005978266);
    Rz(q[24], 0.2389354663504067);
    Rz(q[25], -0.2865947391710613);
    Rz(q[26], -0.5880773071541381);
    Rz(q[27], 0.6362285069775276);
    Rz(q[29], 0.3964494752371541);
    Rz(q[30], -0.38670528408761545);
    Rz(q[31], 0.011734933093958058);
    Rz(q[32], 0.0011415796799869179);
    Rz(q[33], -0.5924971027747271);
    Rz(q[34], 0.6771826672314938);
    Rz(q[35], -0.42942159755003484);
    Rz(q[36], 0.5342946187446849);
    Rz(q[38], -0.8039587731906531);
    Rz(q[39], 0.6712120667598861);
    Rz(q[40], -0.878510082642783);
    Rz(q[41], 0.8658791452001359);
    Rz(q[42], -0.13314967964918875);
    Rz(q[43], 0.3134985834412089);
    Rz(q[45], -0.13421982786758235);
    Rz(q[46], 0.14142059663243078);
    Rz(q[47], -0.24729161215179005);
    Rz(q[48], -0.1789596367298805);
    Rz(q[50], 0.7475635765288697);
    Rz(q[51], -0.8844707307377268);
    CNOT(q[3], q[4]);
    CNOT(q[6], q[7]);
    CNOT(q[8], q[9]);
    CNOT(q[12], q[13]);
    CNOT(q[14], q[15]);
    CNOT(q[16], q[17]);
    CNOT(q[20], q[21]);
    CNOT(q[22], q[23]);
    CNOT(q[24], q[25]);
    CNOT(q[26], q[27]);
    CNOT(q[29], q[30]);
    CNOT(q[31], q[32]);
    CNOT(q[33], q[34]);
    CNOT(q[35], q[36]);
    CNOT(q[38], q[39]);
    CNOT(q[40], q[41]);
    CNOT(q[42], q[43]);
    CNOT(q[45], q[46]);
    CNOT(q[47], q[48]);
    CNOT(q[50], q[51]);
    Rz(q[3], -0.599747845729294);
    Rz(q[4], 0.6253511821098403);
    Rz(q[6], 0.9185238680705767);
    Rz(q[7], 0.5823594541452338);
    Rz(q[8], 0.017602831844571624);
    Rz(q[9], 0.18886699836409832);
    Rz(q[12], -0.4113331864284153);
    Rz(q[13], 0.46501574885052055);
    Rz(q[14], -0.7427018606296518);
    Rz(q[15], 0.7309821231525422);
    Rz(q[16], -0.4572604632711416);
    Rz(q[17], 0.45264748471001387);
    Rz(q[20], 0.8287439256872393);
    Rz(q[21], 0.9260304983482223);
    Rz(q[22], -0.5539049867836513);
    Rz(q[23], 0.5048633976189045);
    Rz(q[24], 0.17394491383358626);
    Rz(q[25], -0.22160418665424148);
    Rz(q[26], 0.24017847920109392);
    Rz(q[27], -0.19202727937770428);
    Rz(q[29], -0.37039764324017677);
    Rz(q[30], 0.38014183438971544);
    Rz(q[31], -0.34101503555577156);
    Rz(q[32], 0.35389154832971653);
    Rz(q[33], 0.6559023537995501);
    Rz(q[34], -0.5712167893427836);
    Rz(q[35], 0.4498659567527707);
    Rz(q[36], -0.34499293555812066);
    Rz(q[38], 0.4151204811787974);
    Rz(q[39], -0.5478671876095643);
    Rz(q[40], -0.6044391967350843);
    Rz(q[41], 0.5918082592924367);
    Rz(q[42], -0.3382065832034761);
    Rz(q[43], 0.5185554869954963);
    Rz(q[45], 0.3976402333451519);
    Rz(q[46], -0.3904394645803035);
    Rz(q[47], 0.44626364529659257);
    Rz(q[48], -0.8725148941782631);
    Rz(q[50], -0.7580489709662166);
    Rz(q[51], 0.6211418167573595);
    Ry(q[0], 1.5708);
    Rx(q[1], 1.5708);
    Rx(q[2], 1.5708);
    Ry(q[3], 1.5708);
    H(q[4]);
    Ry(q[5], 1.5708);
    Rx(q[6], 1.5708);
    H(q[7]);
    Rx(q[8], 1.5708);
    H(q[9]);
    Ry(q[10], 1.5708);
    Ry(q[11], 1.5708);
    Rx(q[12], 1.5708);
    Rx(q[13], 1.5708);
    Ry(q[14], 1.5708);
    Rx(q[15], 1.5708);
    Rx(q[16], 1.5708);
    Rx(q[17], 1.5708);
    Rx(q[18], 1.5708);
    Rx(q[19], 1.5708);
    H(q[20]);
    Rx(q[21], 1.5708);
    Rx(q[22], 1.5708);
    H(q[23]);
    H(q[24]);
    Ry(q[25], 1.5708);
    H(q[26]);
    Ry(q[27], 1.5708);
    H(q[28]);
    Ry(q[29], 1.5708);
    Ry(q[30], 1.5708);
    Ry(q[31], 1.5708);
    Rx(q[32], 1.5708);
    Rx(q[33], 1.5708);
    Ry(q[34], 1.5708);
    H(q[35]);
    H(q[36]);
    Ry(q[37], 1.5708);
    Ry(q[38], 1.5708);
    Rx(q[39], 1.5708);
    H(q[40]);
    Ry(q[41], 1.5708);
    Rx(q[42], 1.5708);
    H(q[43]);
    Ry(q[44], 1.5708);
    H(q[45]);
    Ry(q[46], 1.5708);
    Ry(q[47], 1.5708);
    H(q[48]);
    H(q[49]);
    Rx(q[50], 1.5708);
    Rx(q[51], 1.5708);
    H(q[52]);
    Rz(q[0], 0.7988745176237023);
    Rz(q[1], -0.43623002042232994);
    Rz(q[2], 0.6854509025876576);
    Rz(q[3], -0.6806684237245106);
    Rz(q[4], 0.895797965119231);
    Rz(q[5], -0.8569000264078449);
    Rz(q[7], -0.5874420850315563);
    Rz(q[8], 0.1201593690314567);
    Rz(q[9], -0.1662456403979169);
    Rz(q[10], -0.07589080072114174);
    Rz(q[11], -0.7304236667431359);
    Rz(q[12], 0.941496530479255);
    Rz(q[13], 0.20225972132064465);
    Rz(q[14], -0.15827755225511886);
    Rz(q[15], -0.4344243610529689);
    Rz(q[16], 0.46268235456179807);
    Rz(q[17], -0.8068213968674496);
    Rz(q[18], 0.509068605677839);
    Rz(q[19], -0.48423867254446107);
    Rz(q[20], 0.48894286676445003);
    Rz(q[21], -0.15393657844081263);
    Rz(q[22], -0.13166988724458512);
    Rz(q[23], 0.9167642676321308);
    Rz(q[24], 0.7780904452638893);
    Rz(q[25], 0.9446189706702058);
    Rz(q[26], -0.9928292466716331);
    Rz(q[28], 0.5611001142888932);
    Rz(q[29], -0.3335178196796271);
    Rz(q[30], -0.9320005175083301);
    Rz(q[31], 0.8530467113957879);
    Rz(q[32], -0.43500767720566996);
    Rz(q[33], 0.41543641896921035);
    Rz(q[34], 0.7467429096710533);
    Rz(q[35], -0.5376024887578965);
    Rz(q[37], 0.2245283033807833);
    Rz(q[38], -0.21843587057454775);
    Rz(q[39], 0.5287967848416878);
    Rz(q[40], -0.5409675760824668);
    Rz(q[41], 0.6406489204802666);
    Rz(q[42], -0.5592940283054504);
    Rz(q[44], 0.2577402023668132);
    Rz(q[45], -0.278250406527795);
    Rz(q[46], 0.9067738427572684);
    Rz(q[47], -0.9706188475674273);
    Rz(q[49], -0.619746479193709);
    Rz(q[50], 0.710629980452301);
    CNOT(q[0], q[1]);
    CNOT(q[2], q[3]);
    CNOT(q[4], q[5]);
    CNOT(q[7], q[8]);
    CNOT(q[9], q[10]);
    CNOT(q[11], q[12]);
    CNOT(q[13], q[14]);
    CNOT(q[15], q[16]);
    CNOT(q[17], q[18]);
    CNOT(q[19], q[20]);
    CNOT(q[21], q[22]);
    CNOT(q[23], q[24]);
    CNOT(q[25], q[26]);
    CNOT(q[28], q[29]);
    CNOT(q[30], q[31]);
    CNOT(q[32], q[33]);
    CNOT(q[34], q[35]);
    CNOT(q[37], q[38]);
    CNOT(q[39], q[40]);
    CNOT(q[41], q[42]);
    CNOT(q[44], q[45]);
    CNOT(q[46], q[47]);
    CNOT(q[49], q[50]);
    Rz(q[0], -0.5842790087648996);
    Rz(q[1], 0.9469235059662741);
    Rz(q[2], -0.7059366355498733);
    Rz(q[3], 0.7107191144130203);
    Rz(q[4], 0.9796818974832071);
    Rz(q[5], -0.9407839587718211);
    Rz(q[7], 0.6095061091362723);
    Rz(q[8], 0.9232111748636281);
    Rz(q[9], -0.5926204384664704);
    Rz(q[10], 0.35048399734741176);
    Rz(q[11], 0.5284905331935638);
    Rz(q[12], -0.3174176694574447);
    Rz(q[13], -0.8852923805284783);
    Rz(q[14], 0.929274549594004);
    Rz(q[15], -0.9541773358165268);
    Rz(q[16], 0.9824353293253562);
    Rz(q[17], 0.9767539085138666);
    Rz(q[18], 0.7254933002965229);
    Rz(q[19], -0.9381666089148069);
    Rz(q[20], 0.9428708031347959);
    Rz(q[21], -0.8124804279802466);
    Rz(q[22], 0.5268739622948487);
    Rz(q[23], 0.8739308607246958);
    Rz(q[24], 0.8209238521713237);
    Rz(q[25], -0.8325530873621259);
    Rz(q[26], 0.7843428113606987);
    Rz(q[28], -0.7358964783815413);
    Rz(q[29], 0.9634787729908084);
    Rz(q[30], 0.34679631870769856);
    Rz(q[31], -0.42575012482024077);
    Rz(q[32], 0.41561643926621195);
    Rz(q[33], -0.43518769750267156);
    Rz(q[34], 0.8480619091791521);
    Rz(q[35], -0.6389214882659956);
    Rz(q[37], -0.4403148238967388);
    Rz(q[38], 0.4464072567029743);
    Rz(q[39], -0.28600269726468336);
    Rz(q[40], 0.27383190602390434);
    Rz(q[41], -0.579852820830554);
    Rz(q[42], 0.6612077130053702);
    Rz(q[44], 0.590283505637045);
    Rz(q[45], -0.6107937097980273);
    Rz(q[46], 0.8035865857150007);
    Rz(q[47], -0.8674315905251597);
    Rz(q[49], -0.7522826877369967);
    Rz(q[50], 0.8431661889955893);
    Rx(q[0], 1.5708);
    Ry(q[1], 1.5708);
    H(q[2]);
    H(q[3]);
    Ry(q[4], 1.5708);
    Rx(q[5], 1.5708);
    Ry(q[6], 1.5708);
    Rx(q[7], 1.5708);
    Ry(q[8], 1.5708);
    Ry(q[9], 1.5708);
    H(q[10]);
    H(q[11]);
    H(q[12]);
    H(q[13]);
    Rx(q[14], 1.5708);
    Ry(q[15], 1.5708);
    Ry(q[16], 1.5708);
    H(q[17]);
    Ry(q[18], 1.5708);
    Ry(q[19], 1.5708);
    Ry(q[20], 1.5708);
    Ry(q[21], 1.5708);
    Ry(q[22], 1.5708);
    Ry(q[23], 1.5708);
    Rx(q[24], 1.5708);
    H(q[25]);
    Ry(q[26], 1.5708);
    Rx(q[27], 1.5708);
    Ry(q[28], 1.5708);
    H(q[29]);
    Rx(q[30], 1.5708);
    H(q[31]);
    Ry(q[32], 1.5708);
    Ry(q[33], 1.5708);
    H(q[34]);
    Rx(q[35], 1.5708);
    Ry(q[36], 1.5708);
    H(q[37]);
    H(q[38]);
    H(q[39]);
    Rx(q[40], 1.5708);
    H(q[41]);
    H(q[42]);
    Rx(q[43], 1.5708);
    H(q[44]);
    Rx(q[45], 1.5708);
    Rx(q[46], 1.5708);
    Rx(q[47], 1.5708);
    Rx(q[48], 1.5708);
    Rx(q[49], 1.5708);
    Ry(q[50], 1.5708);
    Ry(q[51], 1.5708);
    Ry(q[52], 1.5708);
    Rz(q[3], 0.6438506938399094);
    Rz(q[4], -0.618247357459362);
    Rz(q[6], 0.07047511031002901);
    Rz(q[7], -0.5695917880942174);
    Rz(q[8], -0.4070669520927599);
    Rz(q[9], 0.6135367823014299);
    Rz(q[12], 0.5682863320894853);
    Rz(q[13], -0.5146037696673801);
    Rz(q[14], 0.28907856373285357);
    Rz(q[15], -0.30079830120996326);
    Rz(q[16], 0.6756017204512074);
    Rz(q[17], -0.6802146990123358);
    Rz(q[20], -0.6911586302494148);
    Rz(q[21], 0.44593305428487634);
    Rz(q[22], 0.39452014463587903);
    Rz(q[23], -0.44356173380062575);
    Rz(q[24], -0.4290645336496083);
    Rz(q[25], 0.38140526082895393);
    Rz(q[26], -0.5160773071541702);
    Rz(q[27], 0.564228506977561);
    Rz(q[29], 0.6204494752371521);
    Rz(q[30], -0.6107052840876123);
    Rz(q[31], -0.9502650669060344);
    Rz(q[32], 0.9631415796799797);
    Rz(q[33], 0.8895028972252971);
    Rz(q[34], -0.8048173327685305);
    Rz(q[35], 0.6805784024500074);
    Rz(q[36], -0.5757053812553574);
    Rz(q[38], -0.8799587731906682);
    Rz(q[39], 0.7472120667599012);
    Rz(q[40], -0.5825100826428156);
    Rz(q[41], 0.5698791452001684);
    Rz(q[42], 0.9028503203508277);
    Rz(q[43], -0.7225014165588084);
    Rz(q[45], 0.3857801721324489);
    Rz(q[46], -0.3785794033676002);
    Rz(q[47], -0.10329161215178768);
    Rz(q[48], -0.3229596367298828);
    Rz(q[50], 0.3035635765288527);
    Rz(q[51], -0.4404707307377103);
    CNOT(q[3], q[4]);
    CNOT(q[6], q[7]);
    CNOT(q[8], q[9]);
    CNOT(q[12], q[13]);
    CNOT(q[14], q[15]);
    CNOT(q[16], q[17]);
    CNOT(q[20], q[21]);
    CNOT(q[22], q[23]);
    CNOT(q[24], q[25]);
    CNOT(q[26], q[27]);
    CNOT(q[29], q[30]);
    CNOT(q[31], q[32]);
    CNOT(q[33], q[34]);
    CNOT(q[35], q[36]);
    CNOT(q[38], q[39]);
    CNOT(q[40], q[41]);
    CNOT(q[42], q[43]);
    CNOT(q[45], q[46]);
    CNOT(q[47], q[48]);
    CNOT(q[50], q[51]);
    Rz(q[3], -0.7497478457292671);
    Rz(q[4], 0.7753511821098146);
    Rz(q[6], -0.8534761319293775);
    Rz(q[7], 0.35435945414518916);
    Rz(q[8], 0.16560283184462107);
    Rz(q[9], 0.04086699836404887);
    Rz(q[12], -0.4873331864284298);
    Rz(q[13], 0.541015748850535);
    Rz(q[14], -0.0047018606296570335);
    Rz(q[15], -0.007017876847452668);
    Rz(q[16], -0.6772604632711591);
    Rz(q[17], 0.6726474847100307);
    Rz(q[20], -0.6512560743127291);
    Rz(q[21], 0.40603049834819016);
    Rz(q[22], -0.9959049867836792);
    Rz(q[23], 0.9468633976189325);
    Rz(q[24], 0.8419449138336009);
    Rz(q[25], -0.8896041866542553);
    Rz(q[26], 0.16817847920112608);
    Rz(q[27], -0.12002727937773534);
    Rz(q[29], -0.5943976432401735);
    Rz(q[30], 0.6041418343897134);
    Rz(q[31], 0.6209849644442211);
    Rz(q[32], -0.6081084516702759);
    Rz(q[33], -0.8260976462004742);
    Rz(q[34], 0.9107832106572408);
    Rz(q[35], -0.6601340432472717);
    Rz(q[36], 0.7650070644419217);
    Rz(q[38], 0.49112048117881246);
    Rz(q[39], -0.6238671876095794);
    Rz(q[40], -0.9004391967350515);
    Rz(q[41], 0.8878082592924043);
    Rz(q[42], 0.6257934167965067);
    Rz(q[43], -0.4454445130044874);
    Rz(q[45], -0.12235976665487905);
    Rz(q[46], 0.12956053541972776);
    Rz(q[47], 0.30226364529658795);
    Rz(q[48], -0.7285148941782584);
    Rz(q[50], -0.31404897096620005);
    Rz(q[51], 0.17714181675734245);
    H(q[0]);
    Rx(q[1], 1.5708);
    Ry(q[2], 1.5708);
    Ry(q[3], 1.5708);
    Rx(q[4], 1.5708);
    H(q[5]);
    Rx(q[6], 1.5708);
    H(q[7]);
    Rx(q[8], 1.5708);
    H(q[9]);
    Ry(q[10], 1.5708);
    Ry(q[11], 1.5708);
    Rx(q[12], 1.5708);
    Rx(q[13], 1.5708);
    H(q[14]);
    Rx(q[15], 1.5708);
    H(q[16]);
    Rx(q[17], 1.5708);
    H(q[18]);
    Rx(q[19], 1.5708);
    Rx(q[20], 1.5708);
    Rx(q[21], 1.5708);
    H(q[22]);
    Rx(q[23], 1.5708);
    Ry(q[24], 1.5708);
    Rx(q[25], 1.5708);
    H(q[26]);
    H(q[27]);
    Rx(q[28], 1.5708);
    Rx(q[29], 1.5708);
    H(q[30]);
    Rx(q[31], 1.5708);
    Rx(q[32], 1.5708);
    H(q[33]);
    Rx(q[34], 1.5708);
    Ry(q[35], 1.5708);
    Rx(q[36], 1.5708);
    Rx(q[37], 1.5708);
    Ry(q[38], 1.5708);
    Ry(q[39], 1.5708);
    Ry(q[40], 1.5708);
    Rx(q[41], 1.5708);
    Rx(q[42], 1.5708);
    Ry(q[43], 1.5708);
    Rx(q[44], 1.5708);
    H(q[45]);
    H(q[46]);
    H(q[47]);
    Ry(q[48], 1.5708);
    H(q[49]);
    H(q[50]);
    H(q[51]);
    Rx(q[52], 1.5708);
    Rz(q[1], -0.5516614516047799);
    Rz(q[4], 0.6174795220715865);
    Rz(q[3], -0.4327711187160072);
    Rz(q[7], -0.05062333421393557);
    Rz(q[5], 0.3177840441511373);
    Rz(q[9], -0.10047261856343086);
    Rz(q[6], 0.5094803678807461);
    Rz(q[13], -0.477422600327394);
    Rz(q[8], -0.6408765210346724);
    Rz(q[15], 0.6213948502194439);
    Rz(q[10], -0.7032192054252008);
    Rz(q[17], 0.754622217740198);
    Rz(q[12], -0.9073671101422918);
    Rz(q[21], 0.7688260728280146);
    Rz(q[14], -0.8617637363416806);
    Rz(q[23], 0.9336663643285862);
    Rz(q[16], -0.3929732311767222);
    Rz(q[25], 0.4097429307239244);
    Rz(q[18], 0.0552051208550207);
    Rz(q[27], -0.04849439530424264);
    Rz(q[20], 0.9954710267271799);
    Rz(q[30], -0.9922667609489023);
    Rz(q[22], -0.08109954594056305);
    Rz(q[32], 0.03439016849657811);
    Rz(q[24], 0.11890354904913102);
    Rz(q[34], 0.06799568729138893);
    Rz(q[26], -0.6030454946335517);
    Rz(q[36], 0.5869432193241655);
    Rz(q[29], -0.9975512288793414);
    Rz(q[37], -0.9798328527655973);
    Rz(q[31], 0.676440254578787);
    Rz(q[39], 0.9238318053231387);
    Rz(q[33], 0.7743905036170879);
    Rz(q[41], -0.8501311900075205);
    Rz(q[35], -0.6828230291151024);
    Rz(q[43], 0.7440183043132079);
    Rz(q[38], -0.06546313715369771);
    Rz(q[44], 0.05739220357069274);
    Rz(q[40], -0.03844537611129621);
    Rz(q[46], 0.037517804558631546);
    Rz(q[42], 0.782361625590525);
    Rz(q[48], 0.9364903862480225);
    Rz(q[45], 0.7611409474788069);
    Rz(q[49], -0.8031117186780351);
    Rz(q[47], -0.38150923394940456);
    Rz(q[51], 0.37485924771904144);
    Rz(q[50], 0.03297060514310833);
    Rz(q[52], -0.3917017537983911);
    CNOT(q[1], q[4]);
    CNOT(q[3], q[7]);
    CNOT(q[5], q[9]);
    CNOT(q[6], q[13]);
    CNOT(q[8], q[15]);
    CNOT(q[10], q[17]);
    CNOT(q[12], q[21]);
    CNOT(q[14], q[23]);
    CNOT(q[16], q[25]);
    CNOT(q[18], q[27]);
    CNOT(q[20], q[30]);
    CNOT(q[22], q[32]);
    CNOT(q[24], q[34]);
    CNOT(q[26], q[36]);
    CNOT(q[29], q[37]);
    CNOT(q[31], q[39]);
    CNOT(q[33], q[41]);
    CNOT(q[35], q[43]);
    CNOT(q[38], q[44]);
    CNOT(q[40], q[46]);
    CNOT(q[42], q[48]);
    CNOT(q[45], q[49]);
    CNOT(q[47], q[51]);
    CNOT(q[50], q[52]);
    Rz(q[1], 0.5641935842445645);
    Rz(q[4], -0.4983755137777578);
    Rz(q[3], 0.24179059583774581);
    Rz(q[7], -0.7251850487676863);
    Rz(q[5], -0.32084588367729194);
    Rz(q[9], 0.5381573092649984);
    Rz(q[6], 0.019062576518183987);
    Rz(q[13], 0.01299519103516814);
    Rz(q[8], 0.22619984017981742);
    Rz(q[15], -0.2456815109950459);
    Rz(q[10], -0.8617595478187416);
    Rz(q[17], 0.9131625601337389);
    Rz(q[12], 0.24317615795692585);
    Rz(q[21], -0.38171719527120296);
    Rz(q[14], -0.9034580610029361);
    Rz(q[23], 0.9753606889898416);
    Rz(q[16], -0.5871899251539519);
    Rz(q[25], 0.603959624701154);
    Rz(q[18], -0.29703548124351364);
    Rz(q[27], 0.3037462067942906);
    Rz(q[20], -0.20718859840113155);
    Rz(q[30], 0.2103928641794091);
    Rz(q[22], 0.18030203332281788);
    Rz(q[32], -0.2270114107668028);
    Rz(q[24], 0.04128661851581855);
    Rz(q[34], 0.1456126178247014);
    Rz(q[26], 0.8499898074110996);
    Rz(q[36], -0.8660920827204859);
    Rz(q[29], 0.26992216901673105);
    Rz(q[37], -0.24730625066166856);
    Rz(q[31], 0.4845073865505883);
    Rz(q[39], -0.8842353266486614);
    Rz(q[33], -0.8911052487304801);
    Rz(q[41], 0.8153645623400477);
    Rz(q[35], -0.0158265769954911);
    Rz(q[43], 0.07702185219359665);
    Rz(q[38], 0.5014707755967253);
    Rz(q[44], -0.5095417091797303);
    Rz(q[40], 0.3068636250628814);
    Rz(q[46], -0.30779119661554605);
    Rz(q[42], 0.5183942238917469);
    Rz(q[48], -0.7995422120531994);
    Rz(q[45], 0.9961315227572937);
    Rz(q[49], 0.9618977060434781);
    Rz(q[47], 0.26285448551587504);
    Rz(q[51], -0.26950447174623815);
    Rz(q[50], 0.6934649565591651);
    Rz(q[52], 0.947803894785552);
    Rx(q[0], 1.5708);
    H(q[1]);
    Rx(q[2], 1.5708);
    H(q[3]);
    Ry(q[4], 1.5708);
    Rx(q[5], 1.5708);
    Ry(q[6], 1.5708);
    Ry(q[7], 1.5708);
    H(q[8]);
    Ry(q[9], 1.5708);
    H(q[10]);
    H(q[11]);
    H(q[12]);
    H(q[13]);
    Ry(q[14], 1.5708);
    H(q[15]);
    Ry(q[16], 1.5708);
    Ry(q[17], 1.5708);
    Rx(q[18], 1.5708);
    Ry(q[19], 1.5708);
    Ry(q[20], 1.5708);
    H(q[21]);
    Rx(q[22], 1.5708);
    Ry(q[23], 1.5708);
    Rx(q[24], 1.5708);
    Ry(q[25], 1.5708);
    Ry(q[26], 1.5708);
    Rx(q[27], 1.5708);
    H(q[28]);
    Ry(q[29], 1.5708);
    Ry(q[30], 1.5708);
    Ry(q[31], 1.5708);
    H(q[32]);
    Rx(q[33], 1.5708);
    H(q[34]);
    Rx(q[35], 1.5708);
    H(q[36]);
    H(q[37]);
    H(q[38]);
    Rx(q[39], 1.5708);
    Rx(q[40], 1.5708);
    H(q[41]);
    Ry(q[42], 1.5708);
    Rx(q[43], 1.5708);
    Ry(q[44], 1.5708);
    Ry(q[45], 1.5708);
    Ry(q[46], 1.5708);
    Ry(q[47], 1.5708);
    Rx(q[48], 1.5708);
    Rx(q[49], 1.5708);
    Rx(q[50], 1.5708);
    Rx(q[51], 1.5708);
    Ry(q[52], 1.5708);
    Rz(q[0], 0.08621640979886422);
    Rz(q[3], 0.16334365608168644);
    Rz(q[2], 0.3973572916277998);
    Rz(q[6], -0.396326411747794);
    Rz(q[4], 0.5427073576530422);
    Rz(q[8], -0.5424147092534605);
    Rz(q[7], 0.09003675765506945);
    Rz(q[14], 0.34202849142196157);
    Rz(q[9], 0.8983264693104055);
    Rz(q[16], -0.7067732133063435);
    Rz(q[11], 0.705156509293045);
    Rz(q[20], -0.6244998637478164);
    Rz(q[13], 0.15790347048791883);
    Rz(q[22], -0.18947787438082972);
    Rz(q[15], 0.8024559428448615);
    Rz(q[24], -0.7589602352735803);
    Rz(q[17], 0.8696926792305255);
    Rz(q[26], -0.8516181998325968);
    Rz(q[19], 0.8756084230940031);
    Rz(q[29], -0.8808339440806644);
    Rz(q[21], 0.24320434330005752);
    Rz(q[31], -0.7125304945256264);
    Rz(q[23], -0.9897343640361297);
    Rz(q[33], -0.9074614067078688);
    Rz(q[25], -0.9497630264840345);
    Rz(q[35], 0.9177909707695425);
    Rz(q[30], -0.12861597882367556);
    Rz(q[38], 0.1299917767076041);
    Rz(q[32], 0.13388452450572944);
    Rz(q[40], -0.12593963181169407);
    Rz(q[34], -0.9621689450218167);
    Rz(q[42], -0.8955807139987333);
    Rz(q[39], -0.7528365530460183);
    Rz(q[45], 0.7258226701533779);
    Rz(q[41], -0.7596124788130051);
    Rz(q[47], 0.7153118414371823);
    Rz(q[46], -0.6814566172688604);
    Rz(q[50], 0.7119632677360634);
    CNOT(q[0], q[3]);
    CNOT(q[2], q[6]);
    CNOT(q[4], q[8]);
    CNOT(q[7], q[14]);
    CNOT(q[9], q[16]);
    CNOT(q[11], q[20]);
    CNOT(q[13], q[22]);
    CNOT(q[15], q[24]);
    CNOT(q[17], q[26]);
    CNOT(q[19], q[29]);
    CNOT(q[21], q[31]);
    CNOT(q[23], q[33]);
    CNOT(q[25], q[35]);
    CNOT(q[30], q[38]);
    CNOT(q[32], q[40]);
    CNOT(q[34], q[42]);
    CNOT(q[39], q[45]);
    CNOT(q[41], q[47]);
    CNOT(q[46], q[50]);
    Rz(q[0], 0.08867615219877248);
    Rz(q[3], 0.16088391368177818);
    Rz(q[2], -0.5836051427906996);
    Rz(q[6], 0.5846360226707056);
    Rz(q[4], 0.6636695068149479);
    Rz(q[8], -0.6633768584153672);
    Rz(q[7], 0.7278338235086499);
    Rz(q[14], -0.2957685744316189);
    Rz(q[9], -0.7470909692987385);
    Rz(q[16], 0.9386442253028005);
    Rz(q[11], -0.534116953419378);
    Rz(q[20], 0.6147735989646066);
    Rz(q[13], 0.057788292865813835);
    Rz(q[22], -0.08936269675872473);
    Rz(q[15], 0.9720523226063322);
    Rz(q[24], -0.9285566150350509);
    Rz(q[17], 0.24050825583717475);
    Rz(q[26], -0.22243377643924597);
    Rz(q[19], -0.968723820269696);
    Rz(q[29], 0.9634982992830347);
    Rz(q[21], -0.5154066862373383);
    Rz(q[31], 0.04608053501176949);
    Rz(q[23], -0.24375561287182076);
    Rz(q[33], 0.3465598421278222);
    Rz(q[25], -0.6402034399153681);
    Rz(q[35], 0.608231384200875);
    Rz(q[30], -0.4706912009416499);
    Rz(q[38], 0.4720669988255795);
    Rz(q[32], -0.1947423470531135);
    Rz(q[40], 0.2026872397471489);
    Rz(q[34], 0.518418784954393);
    Rz(q[42], -0.37616844397494287);
    Rz(q[39], 0.13212668683985648);
    Rz(q[45], -0.15914056973249802);
    Rz(q[41], 0.698842568523934);
    Rz(q[47], -0.7431432058997568);
    Rz(q[46], 0.3162523839911777);
    Rz(q[50], -0.28574573352397464);
    H(q[0]);
    Rx(q[1], 1.5708);
    H(q[2]);
    Ry(q[3], 1.5708);
    Rx(q[4], 1.5708);
    H(q[5]);
    H(q[6]);
    H(q[7]);
    Rx(q[8], 1.5708);
    Rx(q[9], 1.5708);
    Rx(q[10], 1.5708);
    Ry(q[11], 1.5708);
    Rx(q[12], 1.5708);
    Rx(q[13], 1.5708);
    Rx(q[14], 1.5708);
    Ry(q[15], 1.5708);
    Rx(q[16], 1.5708);
    H(q[17]);
    Ry(q[18], 1.5708);
    Rx(q[19], 1.5708);
    Rx(q[20], 1.5708);
    Ry(q[21], 1.5708);
    H(q[22]);
    H(q[23]);
    H(q[24]);
    Rx(q[25], 1.5708);
    Rx(q[26], 1.5708);
    H(q[27]);
    Rx(q[28], 1.5708);
    H(q[29]);
    Rx(q[30], 1.5708);
    H(q[31]);
    Rx(q[32], 1.5708);
    H(q[33]);
    Ry(q[34], 1.5708);
    Ry(q[35], 1.5708);
    Rx(q[36], 1.5708);
    Rx(q[37], 1.5708);
    Ry(q[38], 1.5708);
    H(q[39]);
    Ry(q[40], 1.5708);
    Ry(q[41], 1.5708);
    Rx(q[42], 1.5708);
    Ry(q[43], 1.5708);
    H(q[44]);
    Rx(q[45], 1.5708);
    H(q[46]);
    Rx(q[47], 1.5708);
    H(q[48]);
    H(q[49]);
    Ry(q[50], 1.5708);
    H(q[51]);
    H(q[52]);
  })";
}


TEST(GateAggregatorTester, checkSimple) 
{    
    auto tmp = xacc::getService<xacc::Instruction>("qft");
    auto qft = std::dynamic_pointer_cast<xacc::CompositeInstruction>(tmp);
    qft->expand({std::make_pair("nq", 20)});
    // DEBUG:
    std::cout << "QFT Circuit: \n" << qft->toString() << "\n";
    auto accelerator = xacc::getAccelerator("tnqvm", {std::make_pair("tnqvm-visitor", "exatn-mps")});
    auto qreg = xacc::qalloc(20);
    accelerator->execute(qreg, qft);
}


TEST(GateAggregatorTester, checkSycamoreCirc) 
{    
    const int AGG_WIDTH = 8;
    auto accelerator = xacc::getAccelerator("tnqvm", {
        std::make_pair("tnqvm-visitor", "exatn-mps"),
        std::make_pair("agg-width", AGG_WIDTH)
    });
    
    auto qubitReg = xacc::qalloc(53);
    auto xasmCompiler = xacc::getCompiler("xasm");
    auto ir = xasmCompiler->compile(sycamoreXASM, accelerator);
    auto program = ir->getComposite("testSycamore");
    // There are 1337 instructions in total:
    EXPECT_EQ(program->nInstructions(), 1337);
    accelerator->execute(qubitReg, program);
}

int main(int argc, char **argv) 
{
  xacc::Initialize();
  ::testing::InitGoogleTest(&argc, argv);
  auto ret = RUN_ALL_TESTS();
  xacc::Finalize();
  return ret;
} 
